(ns teknql.tailwind
  (:require [clojure.string]
            [jsonista.core :as j]
            [cuerdas.core :as str]
            [babashka.process :as proc])
  (:import [java.nio.file Files]
           [java.nio.file.attribute FileAttribute]))

(def default-tailwind-config
  "Default tailwind config"
  {:theme    {:extend {}}
   :plugins  []})

(def tailwind-path
  "The path to the postcss command."
  (if (clojure.string/starts-with?
       (System/getProperty "os.name") "Windows")
    "./node_modules/.bin/tailwindcss.cmd"
    "./node_modules/.bin/tailwindcss"))

(defonce ^{:doc "Static state atom associating shadow-cljs build IDs to their respective state."}
  projects
  (atom {}))

(defn- ->json
  "Encode the provided value to JSON"
  [val]
  (j/write-value-as-string
    val
    (j/object-mapper {:encode-key-fn (comp str/camel name)})))

(defn ->export-json
  "Return the provided val as an string with a `module.exports`.

  Used for generating the various *.config.js files that the Node ecosystem loves"
  [val]
  (str "module.exports = " (->json val) ";"))

(defn- log
  "Log the provided `strs` to stderr with a prefix determined by the build ID
  of the passed in `build-cfg`."
  [build-cfg & strs]
  (binding [*out* *err*]
    (println (apply str "[" (:build-id build-cfg) "] " strs))))

(defn- cfg-get
  "Behaves identical to `get` but logs the default value back to the user."
  [config key default]
  (or (get config key)
      (do (log config "Using default value for " key ".")
          default)))

(defn create-tmp-tailwind-project!
  "Create a temporary tailwind project with the necessary assets to build the project using the JIT.

  Return the path to the temporary directory."
  [tailwind-cfg]
  (let [tmp-dir              (-> (Files/createTempDirectory "tailwind" (make-array FileAttribute 0))
                                 (.toFile)
                                 (.getAbsolutePath))
        tmp-css-path         (str tmp-dir "/" "tailwind.css")
        tmp-tw-cfg-path      (str tmp-dir "/" "tailwind.config.js")]
    (spit tmp-css-path "@tailwind base;\n@tailwind components;\n@tailwind utilities;")
    (spit tmp-tw-cfg-path (->export-json tailwind-cfg))
    tmp-dir))

(defn start-watch!
  "Start the tailwind JIT"
  {:shadow.build/stage :configure}
  [build-state]
  (let [config      (:shadow.build/config build-state)
        build-id    (:build-id config)
        out-dir     (:output-dir config)
        http-root   (or (-> config :devtools :http-root) "resources/public")
        output-path (cfg-get config :tailwind/output "resources/public/css/site.css")
        tw-files    (cfg-get config :tailwind/files nil)
        tw-cfg      (merge default-tailwind-config
                           {:content
                             [(str http-root "/**/*.html")
                              (str out-dir "/cljs-runtime/*.js")]}
                           (cfg-get config :tailwind/config nil))
        project-def (get @projects build-id)
        tmp-dir     (create-tmp-tailwind-project!
                      tw-cfg)]
    (when-not (and (= (:tailwind/config project-def)
                      tw-cfg)
                   (= (:tailwind/output project-def)
                      output-path)
                   (= (:tailwind/files project-def)
                      tw-files))
      (if-some [existing-proc (:process project-def)]
        (do (log config "Restarting tailwind process.")
            (proc/destroy existing-proc))
        (log config "Starting tailwind process."))

      (swap! projects
             assoc
             build-id
             {:tailwind/config tw-cfg
              :tailwind/output output-path
              :tailwind/files tw-files
              :process
              (proc/process
                [tailwind-path
                 "-i"
                 (or
                  (:tailwind.css tw-files)
                  (str tmp-dir "/tailwind.css"))
                 "--config"
                 (str
                  (or
                   (:base-path tw-files)
                   tmp-dir)
                  "/tailwind.config.js")
                 "--watch"
                 "-o"
                 output-path]
                {:extra-env {"NODE_ENV"      "development"
                             "TAILWIND_MODE" "watch"}
                 :err       :inherit
                 :out       :inherit})}))
    build-state))

(defn compile-release!
  "Compile the release build of the CSS generated by tailwind."
  {:shadow.build/stage :flush}
  [build-state]
  (let [config      (:shadow.build/config build-state)
        output-path (cfg-get config :tailwind/output "resources/public/css/site.css")
        tw-files    (cfg-get config :tailwind/files nil)
        http-root   (-> config :devtools :http-root)
        output-dir  (-> config :output-dir)
        modules     (->> config :modules keys (mapv name))
        tmp-dir     (create-tmp-tailwind-project!
                      (merge default-tailwind-config
                             {:content
                              (into [(str http-root "/**/*.html")]
                                    (for [m modules]
                                      (str output-dir "/" m ".js")))}
                             (cfg-get config :tailwind/config nil)))]
    (log config "Generating tailwind output")
    (-> (proc/process
          [tailwind-path
           "-i"
           (or
            (:tailwind.css tw-files)
            (str tmp-dir "/tailwind.css"))
           "--config"
           (str
            (or
             (:base-path tw-files)
             tmp-dir)
            "/tailwind.config.js")
           "--minify"
           "-o"
           output-path]
          {:extra-env {"NODE_ENV"      "production"
                       "TAILWIND_MODE" "build"}})
        deref)
    build-state))
